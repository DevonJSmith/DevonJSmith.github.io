<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>projects on Devon Smith - Portfolio</title>
    <link>/tags/projects/</link>
    <description>Recent content in projects on Devon Smith - Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    
    <item>
      <title>Lootbox Simulator</title>
      <link>/posts/lootbox-simulator-v1/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/lootbox-simulator-v1/</guid>
      <description>&lt;h1 id=&#34;lootboxsimulator&#34;&gt;LootboxSimulator&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DevonJSmith/lootbox-simulator&#34;&gt;Github Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This project is an Angular Single-Page Application based on the concept of &amp;ldquo;lootboxes&amp;rdquo;, random virtual rewards commonly found in video games. The goal of this project is to recreate the anticipation and uniqueness of opening such a reward with interesting random items.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;A working demo of this project can be found &lt;a href=&#34;https://devonjsmith.github.io/lootbox-simulator/.&#34;&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;technologies-leveraged&#34;&gt;Technologies Leveraged&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://angular.io/&#34;&gt;Angular v9.x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://material.angular.io/&#34;&gt;Material UI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Libraries / npm Packages
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/marak/Faker.js/&#34;&gt;Faker.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://picsum.photos/&#34;&gt;Lorem Picsum&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/angular/flex-layout&#34;&gt;Angular Flex-Layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/ngx-clipboard&#34;&gt;ngx-clipboard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;core-functionality&#34;&gt;Core Functionality&lt;/h2&gt;
&lt;p&gt;In a typical use case, the user will navigate to the root of the application (ex: &lt;a href=&#34;https://devonjsmith.github.io/lootbox-simulator/&#34;&gt;https://devonjsmith.github.io/lootbox-simulator/&lt;/a&gt;) which will then navigate to a randomly generated sub-route.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Clicking the &amp;ldquo;Reveal&amp;rdquo; button on the card will fade in the &amp;ldquo;back&amp;rdquo; of the card to reveal the randomly generated lootbox item, which consists of a random title, a random image, and a random phrase/description.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;Clicking the &amp;ldquo;Generate New Lootbox&amp;rdquo; will redirect the browser to the application root and generate a new seed and lootbox.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Shareable Link&amp;rdquo; textbox gives a convenient text-box with the current absolute URL. Clicking the &amp;ldquo;Copy&amp;rdquo; button will automatically copy the contents to the clipboard.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;The application uses a random seed system so that each unique URL will always give the same result (ex: &lt;a href=&#34;https://devonjsmith.github.io/lootbox-simulator/lootbox/PZ5LkRx0&#34;&gt;This link&lt;/a&gt;  will always generate &amp;ldquo;Handcrafted Granite Soap&amp;rdquo; with the image of a starry night sky). This allows a user to save or reproduce an interesting result, while also allowing the user to get random results by navigating to the application root.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;LandingSeedGeneratorComponent&lt;/code&gt; serves as the application root. Its only function is to generate a random seed (using the &lt;code&gt;Faker.js&lt;/code&gt; &amp;ldquo;password&amp;rdquo; functionality) and navigate to the &lt;code&gt;/lootbox/&lt;/code&gt; route with the generated seed as a route parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngOnInit&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;// use faker library to generate a seed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;internet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
    &lt;span style=&#34;color:#75715e&#34;&gt;// route to the lootbox home using the seed
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;router&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;navigate&lt;/span&gt;([&lt;span style=&#34;color:#e6db74&#34;&gt;`/lootbox/&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;]);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LootboxHomeComponent&lt;/code&gt; will parse the seed from the URL, which is then passed to the &lt;code&gt;LootBoxService&lt;/code&gt; to generate the lootbox items, ensuring that results are consistent for corresponding seeds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ngOnInit() {&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;// get the seed from the URL, if possible
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seedParameter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;route&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;paramMap&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;)) {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;seed&amp;#39;&lt;/span&gt;);
      }

      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;GenerateLootBoxItems&lt;/span&gt;();
    });
  }

  &lt;span style=&#34;color:#a6e22e&#34;&gt;GenerateLootBoxItems() {&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lootBoxItems&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;itemNumber&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lootBoxService&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;generateLootboxItem&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;lootBoxItems&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
      });
    }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;LootboxItemService&lt;/code&gt; &lt;code&gt;generateLootboxItem&lt;/code&gt; method will parse the passed in seed into a number (by converting each character to its ASCII value) and pass the resulting number to the &lt;code&gt;RandomTextService&lt;/code&gt; and the &lt;code&gt;RandomImageService&lt;/code&gt; in order to return the &lt;code&gt;Observable&amp;lt;LootBoxItemModel&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateLootboxItem&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;LootBoxItemModel&lt;/span&gt;&amp;gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;numberSeed&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;generateSeed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Observable&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;subscriber&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;subscriber&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;next&lt;/span&gt;({
        &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;this.randomTextService.getRandomName&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numberSeed&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;description&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;this.randomTextService.getRandomDescription&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numberSeed&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;imgUrl&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;this.randomImageService.getRandomImgUrl&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;numberSeed&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;flipped&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
      });
    });
  }

  &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;generateSeed&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;number&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seedString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seed&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;seedString&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;seedString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;faker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;internet&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;password&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// convert password to ascii code
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;asciiString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seedString&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;asciiString&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;seedString&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;charCodeAt&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; Number.parseInt(&lt;span style=&#34;color:#a6e22e&#34;&gt;asciiString&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;retrospective&#34;&gt;Retrospective&lt;/h2&gt;
&lt;h3 id=&#34;problems-encountered&#34;&gt;Problems Encountered&lt;/h3&gt;
&lt;h4 id=&#34;using-the-fakerjs-library&#34;&gt;Using the Faker.js Library&lt;/h4&gt;
&lt;p&gt;Random image generation in the current release of &lt;code&gt;Faker.js&lt;/code&gt; is broken. The library still relies on &lt;code&gt;Lorem-Pixel&lt;/code&gt; API, which has been deprecated and is no longer functional. There is a &lt;a href=&#34;https://github.com/Marak/faker.js/pull/855&#34;&gt;pull request open&lt;/a&gt; for the Faker.js library to use the &lt;a href=&#34;https://picsum.photos/&#34;&gt;&lt;code&gt;Lorem Picsum&lt;/code&gt;&lt;/a&gt; api, but the stable branch does not have this merged.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lorem Picsum&lt;/code&gt; &lt;a href=&#34;https://www.npmjs.com/package/lorem-picsum&#34;&gt;does have an angular library&lt;/a&gt;, however this does not provide support for the &lt;code&gt;seed&lt;/code&gt; functionality, so I wasn&amp;rsquo;t able to use it for this project (I may revist this issue later in another project).&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;code&gt;seed&lt;/code&gt; functionality of &lt;code&gt;Faker.js&lt;/code&gt; only accepts a &lt;code&gt;number&lt;/code&gt; value, which is why the generated string needed to be converted using the ASCII values.&lt;/p&gt;
&lt;h4 id=&#34;ngx-flip&#34;&gt;Ngx-Flip&lt;/h4&gt;
&lt;p&gt;Initially, my vision for opening the lootbox items would be akin to flipping over a card to &amp;ldquo;reveal&amp;rdquo; the contents underneath. To this end, I tried implementing the project using the &lt;a href=&#34;https://www.npmjs.com/package/ngx-flip&#34;&gt;ngx-flip library&lt;/a&gt;, however I noticed visual bugs when combing this with &lt;code&gt;flex boxes&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;I ended up replacing the &amp;ldquo;flip animation&amp;rdquo; with a simple fade in/out animation, inspired by &lt;a href=&#34;https://stackoverflow.com/a/36417971&#34;&gt;this StackOverflow comment&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;lessons-learned&#34;&gt;Lessons Learned&lt;/h3&gt;
&lt;h4 id=&#34;angular-animations&#34;&gt;Angular Animations&lt;/h4&gt;
&lt;p&gt;After replacing the &lt;code&gt;ngx-flip&lt;/code&gt; package and deciding to use Angular animations instead, I looked into reusing Animations in a robust way. I found &lt;a href=&#34;https://angular.io/guide/reusable-animations#creating-reusable-animations&#34;&gt;this article in the Angular documentation&lt;/a&gt; which covered this exact topic, and I ended up with a exported animation like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; { &lt;span style=&#34;color:#a6e22e&#34;&gt;animation&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;transition&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;animate&lt;/span&gt; } &lt;span style=&#34;color:#66d9ef&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;@angular/animations&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FadeInAnimation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animation&lt;/span&gt;([
    &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;0&lt;/span&gt;}),
    &lt;span style=&#34;color:#a6e22e&#34;&gt;animate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{ duration }}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;1&lt;/span&gt;}))
]);

&lt;span style=&#34;color:#66d9ef&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;FadeOutAnimation&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;animation&lt;/span&gt;([
    &lt;span style=&#34;color:#a6e22e&#34;&gt;animate&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;{{ duration }}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;({&lt;span style=&#34;color:#a6e22e&#34;&gt;opacity&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;0&lt;/span&gt;}))
]);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And I was able to implement them into the &lt;code&gt;LootBoxHome&lt;/code&gt; and &lt;code&gt;LootBoxItem&lt;/code&gt; components like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;@Component&lt;/span&gt;({
  &lt;span style=&#34;color:#a6e22e&#34;&gt;selector&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;app-lootbox-home&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;templateUrl&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./lootbox-home.component.html&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#a6e22e&#34;&gt;styleUrls&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;./lootbox-home.component.css&amp;#39;&lt;/span&gt;],
  &lt;span style=&#34;color:#a6e22e&#34;&gt;animations&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [
    &lt;span style=&#34;color:#a6e22e&#34;&gt;trigger&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fadeInOut&amp;#39;&lt;/span&gt;, [
      &lt;span style=&#34;color:#a6e22e&#34;&gt;transition&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:enter&amp;#39;&lt;/span&gt;, [
        &lt;span style=&#34;color:#a6e22e&#34;&gt;useAnimation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;FadeInAnimation&lt;/span&gt;, {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;900ms&amp;#39;&lt;/span&gt;
          }
        })
      ]),
      &lt;span style=&#34;color:#a6e22e&#34;&gt;transition&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;:leave&amp;#39;&lt;/span&gt;, [
        &lt;span style=&#34;color:#a6e22e&#34;&gt;useAnimation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;FadeOutAnimation&lt;/span&gt;, {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;params&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;duration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;900ms&amp;#39;&lt;/span&gt;
          }
        })
      ])
    ])
  ]
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I added the &lt;code&gt;duration&lt;/code&gt; parameter so that the animations could be re-used across components, but the length of the animation could be adjusted independently for each component.&lt;/p&gt;
&lt;h4 id=&#34;github-pages-and-angular&#34;&gt;Github Pages and Angular&lt;/h4&gt;
&lt;p&gt;I knew before starting this project that I wanted it to eventually be hosted on Github Pages. I already this personal website (&lt;a href=&#34;https://devonjsmith.github.io&#34;&gt;https://devonjsmith.github.io&lt;/a&gt;) hosted by Github so I figured it would be much the same process for hosting an Angular application.&lt;/p&gt;
&lt;p&gt;However, I did encounter some issues with building the Angular application in production mode and getting the es5 bundles to generate properly. I eventually moved to the &lt;a href=&#34;https://www.npmjs.com/package/angular-cli-ghpages&#34;&gt;angular-cli-ghpages&lt;/a&gt; plugin, which conveniently builds the project for production onto a new &lt;code&gt;gh-pages&lt;/code&gt; branch. From there, it&amp;rsquo;s just a matter of modifying the settings for the github project.&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h3 id=&#34;possible-improvements&#34;&gt;Possible Improvements&lt;/h3&gt;
&lt;h4 id=&#34;multiple-lootbox-items&#34;&gt;Multiple Lootbox Items&lt;/h4&gt;
&lt;p&gt;My initial concept for this project included multiple lootbox items that would each need to be revealed one after another. I was inspired by the &amp;ldquo;card pack&amp;rdquo; opening mechanics in several free-to-play card games:&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: &lt;a href=&#34;https://www.reddit.com/r/gwent/comments/alowj0/base_kegs_can_now_drop_premium_starter_cards/&#34;&gt;reddit.com/r/gwent&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Image source: &lt;a href=&#34;https://www.reddit.com/r/HSPulls/comments/34ktj6/best_card_pack_ive_ever_opened_xpost_from/&#34;&gt;reddit.com/r/HSPulls&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In order to allow multiple lootbox items to be generated, I would need to develop a system to generate &lt;code&gt;n&lt;/code&gt; possible numerical seeds from a single string seed. This is because I would like to keep the functionality where each unique URL produces consistent results, while still keeping an interesting amount of randomness.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This project was an enjoyable Angular experiment. I was impressed by the functionality of the &lt;code&gt;Faker.js&lt;/code&gt; library, though I do feel that a more complicated random system for generating the lootbox content could improve the system.&lt;/p&gt;
&lt;p&gt;This project was a good opportunity to learn about Angular animations and deploying strategies for Github pages.&lt;/p&gt;
&lt;p&gt;The UI and layout of this project were made very convenient by the &lt;code&gt;Material&lt;/code&gt; and &lt;code&gt;Angular-flex&lt;/code&gt; libraries. I am eager to see how my UI/UX design could improve in the future with more experience.&lt;/p&gt;
</description>
    </item>
    
    
    
    <item>
      <title>Steam Achievements Tracker</title>
      <link>/posts/steam-achievements-tracker/</link>
      <pubDate>Sun, 08 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/steam-achievements-tracker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/DevonJSmith/SteamAchievementsTracker&#34;&gt;Github Link&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;steam-achievements-tracker&#34;&gt;Steam Achievements Tracker&lt;/h1&gt;
&lt;p&gt;This is a mobile app built upon the Flutter framework that uses the Steam API. Given a Steam User&amp;rsquo;s vanity URL, it orders all their owned games by percentage of achievements completed in descending order (it filters out games with 100% achievement completion).&lt;/p&gt;
&lt;p&gt;The goal of this app is to provide a simple way to see which games are closest to 100% achievement completion for who care about such things, similar to the built in badge progress in the Steam UI.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Flutter: &lt;a href=&#34;https://flutter.dev/docs/get-started/install&#34;&gt;Get it here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Android SDK should also be installed: &lt;a href=&#34;https://developer.android.com/studio#downloads&#34;&gt;Get it here&lt;/a&gt;
An android emulator will be needed to run the app locally&lt;/p&gt;
&lt;h3 id=&#34;installing&#34;&gt;Installing&lt;/h3&gt;
&lt;p&gt;Before running the program, a valid Steam APIkey should be entered into &amp;lsquo;configs.dart&amp;rsquo;. A Steam API key can be gotten from the &lt;a href=&#34;https://steamcommunity.com/dev/apikey&#34;&gt;Steam Dev Portal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTE: Your Steam API key is extremely sensitive and should be kept secret. Any commits/PRs that include this value will be rejected&lt;/p&gt;
&lt;p&gt;Additional Note: The Steam Profile you are attempting to pull data from must be set to public. &lt;a href=&#34;https://support.steampowered.com/kb_article.php?ref=4113-YUDH-6401&#34;&gt;See here for a Steam Knowledge Base article on privacy settings&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;built-with&#34;&gt;Built With&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flutter.dev&#34;&gt;Flutter&lt;/a&gt; - The Mobile App Framework&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    
  </channel>
</rss>
