{"componentChunkName":"component---src-templates-post-post-js","path":"/blog/lootbox-simulator","webpackCompilationHash":"c7e880b2d92e522791e0","result":{"data":{"markdownRemark":{"html":"<h1>LootboxSimulator</h1>\n<p><a href=\"https://github.com/DevonJSmith/lootbox-simulator\">Github Link</a></p>\n<h2>Introduction</h2>\n<p>This project is an Angular Single-Page Application based on the concept of \"lootboxes\", random virtual rewards commonly found in video games. The goal of this project is to recreate the anticipation and uniqueness of opening such a reward with interesting random items.</p>\n<img src=\"https://imgur.com/UfCicGg.png\" alt=\"lootbox before reveal\" width=\"500px\">  \n<img src=\"https://imgur.com/nxgX0xa.png\" alt=\"lootbox after reveal\" width=\"500px\">\n<p>A working demo of this project can be found <a href=\"https://devonjsmith.github.io/lootbox-simulator/.\">here.</a> </p>\n<h2>Technologies Leveraged</h2>\n<ul>\n<li><a href=\"https://angular.io/\">Angular v9.x</a></li>\n<li><a href=\"https://material.angular.io/\">Material UI</a></li>\n<li>\n<p>Libraries / npm Packages</p>\n<ul>\n<li><a href=\"https://github.com/marak/Faker.js/\">Faker.js</a></li>\n<li><a href=\"https://picsum.photos/\">Lorem Picsum</a></li>\n<li><a href=\"https://github.com/angular/flex-layout\">Angular Flex-Layout</a></li>\n<li><a href=\"https://www.npmjs.com/package/ngx-clipboard\">ngx-clipboard</a></li>\n</ul>\n</li>\n</ul>\n<h2>Core Functionality</h2>\n<p>In a typical use case, the user will navigate to the root of the application (ex: <a href=\"https://devonjsmith.github.io/lootbox-simulator/\">https://devonjsmith.github.io/lootbox-simulator/</a>) which will then navigate to a randomly generated sub-route. </p>\n<img src=\"https://imgur.com/YCZ6jXQ.png\" alt=\"example of generated url\" width=\"500px\">\n<p>Clicking the \"Reveal\" button on the card will fade in the \"back\" of the card to reveal the randomly generated lootbox item, which consists of a random title, a random image, and a random phrase/description.</p>\n<img src=\"https://imgur.com/qcyOHQc.png\" alt=\"the generate new button\" width=\"500px\">  \n<p>Clicking the \"Generate New Lootbox\" will redirect the browser to the application root and generate a new seed and lootbox. </p>\n<p>The \"Shareable Link\" textbox gives a convenient text-box with the current absolute URL. Clicking the \"Copy\" button will automatically copy the contents to the clipboard.</p>\n<img src=\"https://imgur.com/fNwnVr5.png\" alt=\"link copied\" width=\"500px\">\n<p>The application uses a random seed system so that each unique URL will always give the same result (ex: <a href=\"https://devonjsmith.github.io/lootbox-simulator/lootbox/PZ5LkRx0\">This link</a>  will always generate \"Handcrafted Granite Soap\" with the image of a starry night sky). This allows a user to save or reproduce an interesting result, while also allowing the user to get random results by navigating to the application root.</p>\n<p>The <code class=\"language-text\">LandingSeedGeneratorComponent</code> serves as the application root. Its only function is to generate a random seed (using the <code class=\"language-text\">Faker.js</code> \"password\" functionality) and navigate to the <code class=\"language-text\">/lootbox/</code> route with the generated seed as a route parameter:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// use faker library to generate a seed</span>\n    <span class=\"token keyword\">const</span> seed <span class=\"token operator\">=</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// route to the lootbox home using the seed</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>router<span class=\"token punctuation\">.</span><span class=\"token function\">navigate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/lootbox/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>seed<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">LootboxHomeComponent</code> will parse the seed from the URL, which is then passed to the <code class=\"language-text\">LootBoxService</code> to generate the lootbox items, ensuring that results are consistent for corresponding seeds:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">ngOnInit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// get the seed from the URL, if possible</span>\n    <span class=\"token keyword\">const</span> seedParameter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">.</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">params</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seed <span class=\"token operator\">=</span> params<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GenerateLootBoxItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">GenerateLootBoxItems</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lootBoxItems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>itemNumber<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lootBoxService<span class=\"token punctuation\">.</span><span class=\"token function\">generateLootboxItem</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lootBoxItems<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">LootboxItemService</code> <code class=\"language-text\">generateLootboxItem</code> method will parse the passed in seed into a number (by converting each character to its ASCII value) and pass the resulting number to the <code class=\"language-text\">RandomTextService</code> and the <code class=\"language-text\">RandomImageService</code> in order to return the <code class=\"language-text\">Observable&lt;LootBoxItemModel&gt;</code></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">public</span> <span class=\"token function\">generateLootboxItem</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Observable<span class=\"token operator\">&lt;</span>LootBoxItemModel<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> numberSeed <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">generateSeed</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subscriber</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>randomTextService<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomName</span><span class=\"token punctuation\">(</span>numberSeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        description<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>randomTextService<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomDescription</span><span class=\"token punctuation\">(</span>numberSeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        imgUrl<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>randomImageService<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomImgUrl</span><span class=\"token punctuation\">(</span>numberSeed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        flipped<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token function\">generateSeed</span><span class=\"token punctuation\">(</span>seed<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> seedString <span class=\"token operator\">=</span> seed<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>seedString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      seedString <span class=\"token operator\">=</span> faker<span class=\"token punctuation\">.</span>internet<span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// convert password to ascii code</span>\n    <span class=\"token keyword\">let</span> asciiString <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> seedString<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      asciiString <span class=\"token operator\">+=</span> seedString<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Number<span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>asciiString<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Retrospective</h2>\n<h3>Problems Encountered</h3>\n<h4>Using the Faker.js Library</h4>\n<p>Random image generation in the current release of <code class=\"language-text\">Faker.js</code> is broken. The library still relies on <code class=\"language-text\">Lorem-Pixel</code> API, which has been deprecated and is no longer functional. There is a <a href=\"https://github.com/Marak/faker.js/pull/855\">pull request open</a> for the Faker.js library to use the <a href=\"https://picsum.photos/\"><code class=\"language-text\">Lorem Picsum</code></a> api, but the stable branch does not have this merged.  </p>\n<p>  <code class=\"language-text\">Lorem Picsum</code> <a href=\"https://www.npmjs.com/package/lorem-picsum\">does have an angular library</a>, however this does not provide support for the <code class=\"language-text\">seed</code> functionality, so I wasn't able to use it for this project (I may revist this issue later in another project).</p>\n<p>  Lastly, the <code class=\"language-text\">seed</code> functionality of <code class=\"language-text\">Faker.js</code> only accepts a <code class=\"language-text\">number</code> value, which is why the generated string needed to be converted using the ASCII values.</p>\n<h4>Ngx-Flip</h4>\n<p>Initially, my vision for opening the lootbox items would be akin to flipping over a card to \"reveal\" the contents underneath. To this end, I tried implementing the project using the <a href=\"https://www.npmjs.com/package/ngx-flip\">ngx-flip library</a>, however I noticed visual bugs when combing this with <code class=\"language-text\">flex boxes</code>:</p>\n<img src=\"https://imgur.com/vH477vq.png\" alt=\"example of issues with ngx-flip\" width=\"500px\">\n<p>I ended up replacing the \"flip animation\" with a simple fade in/out animation, inspired by <a href=\"https://stackoverflow.com/a/36417971\">this StackOverflow comment</a>.</p>\n<h3>Lessons Learned</h3>\n<h4>Angular Animations</h4>\n<p>After replacing the <code class=\"language-text\">ngx-flip</code> package and deciding to use Angular animations instead, I looked into reusing Animations in a robust way. I found <a href=\"https://angular.io/guide/reusable-animations#creating-reusable-animations\">this article in the Angular documentation</a> which covered this exact topic, and I ended up with a exported animation like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> animation<span class=\"token punctuation\">,</span> trigger<span class=\"token punctuation\">,</span> transition<span class=\"token punctuation\">,</span> style<span class=\"token punctuation\">,</span> animate <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/animations'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> FadeInAnimation <span class=\"token operator\">=</span> <span class=\"token function\">animation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{ duration }}'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> FadeOutAnimation <span class=\"token operator\">=</span> <span class=\"token function\">animation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{{ duration }}'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>opacity<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And I was able to implement them into the <code class=\"language-text\">LootBoxHome</code> and <code class=\"language-text\">LootBoxItem</code> components like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-lootbox-home'</span><span class=\"token punctuation\">,</span>\n  templateUrl<span class=\"token punctuation\">:</span> <span class=\"token string\">'./lootbox-home.component.html'</span><span class=\"token punctuation\">,</span>\n  styleUrls<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./lootbox-home.component.css'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  animations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fadeInOut'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token string\">':enter'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">useAnimation</span><span class=\"token punctuation\">(</span>FadeInAnimation<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            duration<span class=\"token punctuation\">:</span> <span class=\"token string\">'900ms'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">transition</span><span class=\"token punctuation\">(</span><span class=\"token string\">':leave'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token function\">useAnimation</span><span class=\"token punctuation\">(</span>FadeOutAnimation<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          params<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n            duration<span class=\"token punctuation\">:</span> <span class=\"token string\">'900ms'</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>I added the <code class=\"language-text\">duration</code> parameter so that the animations could be re-used across components, but the length of the animation could be adjusted independently for each component.</p>\n<h4>Github Pages and Angular</h4>\n<p>I knew before starting this project that I wanted it to eventually be hosted on Github Pages. I already this personal website (<a href=\"https://devonjsmith.github.io\">https://devonjsmith.github.io</a>) hosted by Github so I figured it would be much the same process for hosting an Angular application.</p>\n<p>However, I did encounter some issues with building the Angular application in production mode and getting the es5 bundles to generate properly. I eventually moved to the <a href=\"https://www.npmjs.com/package/angular-cli-ghpages\">angular-cli-ghpages</a> plugin, which conveniently builds the project for production onto a new <code class=\"language-text\">gh-pages</code> branch. From there, it's just a matter of modifying the settings for the github project.</p>\n<img src=\"https://imgur.com/h0O2tc2.png\" alt=\"github pages configuration\" width=\"500px\">\n<h3>Possible Improvements</h3>\n<h4>Multiple Lootbox Items</h4>\n<p>My initial concept for this project included multiple lootbox items that would each need to be revealed one after another. I was inspired by the \"card pack\" opening mechanics in several free-to-play card games:</p>\n<img src=\"https://preview.redd.it/quxy6gfi3rd21.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=2b2c522c35dddb4e226d24aba57ecacee620fc9b\" alt=\"gwent card keg opening\" width=\"500px\">  \n<p><em>Image source: <a href=\"https://www.reddit.com/r/gwent/comments/alowj0/base_kegs_can_now_drop_premium_starter_cards/\">reddit.com/r/gwent</a></em></p>\n<img src=\"https://i.imgur.com/J70DR2U.jpg\" alt=\"heartstone card pack\" width=\"500px\">  \n<p><em>Image source: <a href=\"https://www.reddit.com/r/HSPulls/comments/34ktj6/best_card_pack_ive_ever_opened_xpost_from/\">reddit.com/r/HSPulls</a></em></p>\n<p>In order to allow multiple lootbox items to be generated, I would need to develop a system to generate <code class=\"language-text\">n</code> possible numerical seeds from a single string seed. This is because I would like to keep the functionality where each unique URL produces consistent results, while still keeping an interesting amount of randomness. </p>\n<h2>Conclusion</h2>\n<p>This project was an enjoyable Angular experiment. I was impressed by the functionality of the <code class=\"language-text\">Faker.js</code> library, though I do feel that a more complicated random system for generating the lootbox content could improve the system.</p>\n<p>This project was a good opportunity to learn about Angular animations and deploying strategies for Github pages. </p>\n<p>The UI and layout of this project were made very convenient by the <code class=\"language-text\">Material</code> and <code class=\"language-text\">Angular-flex</code> libraries. I am eager to see how my UI/UX design could improve in the future with more experience.</p>","timeToRead":6,"frontmatter":{"title":"Lootbox Simulator","date":"30 Mar 2020","tags":["angular","projects"],"path":"blog/lootbox-simulator","excerpt":"An Angular application that generates lootbox items with random seeds","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='200'%3e%3cpath%20d='M0%20100v100h401V0H0v100m36-26v31l6-10c7-13%207-13%2010-10l3%203%2014-14%2014-14%2018%2017%2017%2018%202-3%203-2%205%207%204%207V44H36v30m233-9c0%2015%200%2016%202%2016l3-1h2c7%204%2013-2%2013-11%200-10-5-13-13-10-2%201-2%201-2-5s0-6-2-6h-3v17m-87%200v16h10c9%200%209%200%209-2%200-3%200-3-6-3h-7V49h-6v16m74-13l-1%204-3%203c-3%200-3%203%200%204%202%200%202%201%202%208%200%208%201%2010%206%2010s7-1%205-3c-1-1-2-2-3-1-2%200-3-3-3-10%200-4%201-4%204-4%202%200%203-1%203-2%200-2-1-3-3-3-3%200-3%200-3-3s-3-5-4-3m-50%208c-7%204-6%2017%202%2020s16-1%2016-10c0-6-1-6-4-9-4-4-9-4-14-1m25%200c-7%204-6%2017%202%2020s16-1%2016-10c0-6-1-6-4-9-4-4-9-4-14-1m65%201c-5%204-5%2013%200%2017%209%208%2021%200%2018-12-2-8-12-11-18-5m20-2l3%205c4%205%204%205%200%2010-4%207-4%207-1%207%202%200%203-1%205-4%203-5%203-5%206%200%202%203%203%204%205%204%204%200%204%200-1-7l-3-5%203-5c5-6%205-6%202-6-2%200-4%201-6%204l-3%204-2-4c-3-4-8-6-8-3m-106%204c-4%202-3%2012%202%2014%203%201%206-2%206-7%200-7-4-10-8-7m25%200c-4%202-3%2012%202%2014%203%201%206-2%206-7%200-7-4-10-8-7m41%201c-3%201-3%2010%200%2012%204%204%2010-5%207-11-2-3-4-4-7-1m24%200c-3%203-2%209%200%2011%206%206%2013-5%207-11-3-3-6-3-7%200m-125%2038c-4%200-8%205-8%209s4%208%209%209%206%203%206%206c-1%203-6%204-10%202-3-2-3-2-5%200s-1%202%203%204c8%204%2017%200%2017-8%200-5-2-7-7-9-6-2-7-3-7-5%200-3%204-4%208-2%203%201%203%201%205-1%202-3-4-6-11-5m89%2016v16h6v-33h-6v17m35-11c0%203-1%204-2%205-3%200-3%203%200%203%202%201%202%202%202%209s0%208%202%209c4%202%2011%200%209-3l-4-1c-2%200-2%200-2-7v-7h3c2%200%203%200%203-2s-1-2-3-2c-3%200-3%200-3-3%200-6-4-6-5-1m-107%2016v11h5v-23h-5v12m11%200v11h3c2%200%202%200%202-9%200-8%200-8%202-9%205-2%206%200%206%2010%200%208%200%208%203%208%202%200%202%200%202-8s1-11%204-11%204%203%204%2011%200%208%203%208c2%200%202%200%202-10%200-8%200-10-2-11-2-2-8-2-11-1-2%202-2%202-3%200h-10l-3-1c-2%200-2%201-2%2012m36-3c0%208%200%209%202%2012%203%202%207%203%2010%201h3l3%201c2%200%202-1%202-11v-12h-6v9c0%208%200%208-3%209-4%202-5%200-5-10v-8h-6v9m38-8c-5%203-2%206%204%204h5c2%203%201%205-4%205-5%201-9%204-9%207%200%205%207%208%2012%205h3c3%203%204%201%204-8s0-10-2-12c-3-2-9-3-13-1m39%201c-8%207-4%2021%207%2021%2010%200%2015-13%208-20-3-4-11-4-15-1m22%2010v11h3c2%200%203-1%203-8%200-8%201-10%205-10%204-1%204-5%200-5l-4%202h-2l-2-2h-3v12m-18-6c-3%202-3%2010%201%2012s7-1%207-7-4-9-8-5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":2,"src":"/static/03d82c3156a3b4a73a7f75f50da1285e/e9c7b/lootboxsimulator.png","srcSet":"/static/03d82c3156a3b4a73a7f75f50da1285e/69781/lootboxsimulator.png 250w,\n/static/03d82c3156a3b4a73a7f75f50da1285e/3fa08/lootboxsimulator.png 500w,\n/static/03d82c3156a3b4a73a7f75f50da1285e/e9c7b/lootboxsimulator.png 1000w,\n/static/03d82c3156a3b4a73a7f75f50da1285e/91f24/lootboxsimulator.png 1280w","sizes":"(max-width: 1000px) 100vw, 1000px"}}}}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"path":"blog/steam-achievements-tracker","title":"Steam Achievements Tracker","tags":["flutter","dart","steam","projects"],"excerpt":"A simple mobile app made with the Flutter framework and the Steam API","cover":{"childImageSharp":{"fluid":{"tracedSVG":"data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20width='400'%20height='225'%3e%3cpath%20d='M0%20113v112h401V0H0v113m289-81c-7%204-6-1-7%2082%200%2080%200%2077%205%2081%203%202%204%203%2034%203%2033%200%2037%200%2040-5%202-2%202-7%202-62%200-84%200-90-2-94l-5-5c-4-2-64-1-67%200m60%2019v2l-1-1c0-3-5-2-5%200h-1c-2-3-42-3-42%200l-1%201-1-1c0-2-2-2-2%200h-2v-1l-1-1-2%201v1l-1-1-2-1c-2%200-2%201-2%207v6h73v-6c0-6%200-7-2-7l-5-1c-3%200-3%200-3%202M139%2079c0%207%200%209%202%209l1-4c0-9%205-9%205-1%201%207%203%206%203-1v-6h-4c-4%200-4%200-4-4l-1-3c-2%200-2%202-2%2010M36%2071c-3%203%200%208%205%209%203%202%202%204-2%205-5%200-6%200-4%202%205%203%2011%200%2011-5%200-3-1-3-4-5-6-2-5-5%201-4l3-1c-1-2-8-2-10-1m76%207l-3%209c0%202%203%201%204-1s2-3%204-3c3%200%204%201%205%203l2%202c2%200%202-1-4-15-2-6-5-4-8%205m-53-1c-5%205%201%2013%207%2010%203-1%202-2%200-2-3%201-6%200-6-2l4-1c5%200%206-1%204-5-2-3-7-3-9%200m25%205l1%206c1%200%202-1%202-5s1-5%202-5%202%201%202%205c0%206%203%207%203%201%200-5%201-7%203-7%201%200%202%202%202%207%200%203%200%204%202%204%201%200%202-8%200-11-1-2-5-3-7-1h-1l-5-1h-4v7m77-5c-5%205%201%2013%207%2010%203-1%202-2%200-2-2%201-3%200-5-1-1-1-1-2%203-2s5%200%205-2c0-4-7-7-10-3m26%200c-6%205%201%2013%207%2010%203-1%202-2-1-2-3%201-5%200-5-2l4-1c4%200%204%200%204-2%200-5-6-7-9-3m12%205l1%206c1%200%202-1%202-5s1-5%202-5%202%201%202%205c0%206%203%207%203%201%200-5%201-7%203-7%201%200%202%202%202%207%200%203%200%204%202%204%201%200%202-8%200-11-1-2-5-3-7-1h-1l-5-1h-4v7m22-5c-5%205%201%2013%207%2010%203-1%202-2%200-2-3%201-6%200-6-2l5-1c3%200%204%200%204-2%200-4-7-7-10-3m-64%2032c0%207%200%209%202%209l1-3v-3l3%203c4%205%207%204%203-1l-2-3%202-3c3-4%201-4-3%200l-3%202v-5l-1-6c-2%200-2%202-2%2010m-24-3c-2%201-1%202%201%202%204-1%206%202%203%203-5%201-6%202-6%204s1%203%206%203h5v-5c0-7-3-10-9-7m38%201c-3%202-2%207%200%209s8%202%209%200l-2-1c-3%201-6%200-6-2l4-1c5%200%205-1%204-4-2-3-7-4-9-1m115%2068v4h73v-9h-73v5'%20fill='%23d3d3d3'%20fill-rule='evenodd'/%3e%3c/svg%3e","aspectRatio":1.7777777777777777,"src":"/static/c2aa605a940d64db221526a9068dfe83/59139/steamachievementstracker-preview.png","srcSet":"/static/c2aa605a940d64db221526a9068dfe83/d3809/steamachievementstracker-preview.png 150w,\n/static/c2aa605a940d64db221526a9068dfe83/fdbb0/steamachievementstracker-preview.png 300w,\n/static/c2aa605a940d64db221526a9068dfe83/59139/steamachievementstracker-preview.png 600w,\n/static/c2aa605a940d64db221526a9068dfe83/cb30f/steamachievementstracker-preview.png 900w,\n/static/c2aa605a940d64db221526a9068dfe83/ba299/steamachievementstracker-preview.png 1200w,\n/static/c2aa605a940d64db221526a9068dfe83/ec873/steamachievementstracker-preview.png 1920w","sizes":"(max-width: 600px) 100vw, 600px"}}}}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"postPath":"blog/lootbox-simulator","translations":[{"hreflang":"en","path":"blog/lootbox-simulator/"}]}}}